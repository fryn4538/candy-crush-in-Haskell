2019-02-13 | 1 h 12 min | Created a GitHub repo and taugth Erik how to use it.
2019-02-18 | 10:10 - 12:00 och 13:00 - 17:00 | The whole group sat down together and decided how to game should be structured. We also decided that we are going to use a Haskell library called Gloss to create the graphics of the game. I created a function to make a window appear when we ran the .exe file created by building the file in cabal. After that I created a function to draw a gameboard in the window, that function is called squareLocations. To that I created a function to color the gamebord which is called paintRectangles.

2019-02-19 | 10:00 - 18:00 | I created a gameloop (the function main) using the built-in function play in Gloss. I also created a function to move the marker which represents the player around the gameboard. When the player was able to move it was time to create a function that spawn candies. I implemented that today aswell.

2019-02-20 | 12:00 - 17:00 | Replaced the hardcoded values with functions that represents the values so that if you want a larger or smaller gamebord it is just to change the value of one function. The function is boxes and I also changed boxesInt because before it didn't took the value from boxes but now it does and converts it into an Int.

2019-02-21 | 10:00 - 15:00 | Ran into some problems today because we couldn't figure out how to replace the candies with eachother. The problem was bad structure in our lists. I solved that by creating a better structures. A type namned Candy was created to store information of a specific candy. Also implemented a datatype Player with attributes such as the square location, a list of all the candies on the gameboard and a list of random colors.

2019-02-22 | 10:00 - 12:30 | Before we couldn't select a specific candy but now we can bescuse I edited the code for handleKeys and added another attribute to Player to keep track of if we have selected a square by pressing enter or not.

2019-02-25 | 10:00 - 22:15 | I created the functions moveBlack, moveBlackAux, recolor so that when we have three or more candies in a row of the same color they turn into black and moves to the top of the gameboard. Also created checkRows to check if there are any vertical or horizontal rows that should be crushed.

2019-02-26 | 10:00 - 15:10 | We had one last problem which was that de black candies at the top of the gamebord didn't get a new color so that they would be part of the game again. I solved that by creating the functions refill and refillAux so that when a black candy is at the top of the gamebord it gets recolored to a random color. After that I crated the functions scoreDisp and updateScore so that the game keeps track of how many correct moves the player has done. When that was done I started to comment the code, I commented the updateScore and scoreDisp functions.

2019-02-27 to 2019-02-28 | 15:00 to 06:25 | Kept on commenting functions. Commented boxes, boxesInt, window, background, fps, initState, render, refill, refillAux, moveBlack and moveBlackAux, updateLocationX, updateLocationY. After that I created testcases 1 thru 10 and 22-24. Then it was time to start writing on the documentation for the project. I structured the document and wrote about the external libraries, and functions refill, moveSquare and I wrote the section about known shortcomings of the program. But now the time is 06:24 and I have been up too long. I'll keep working on that tomorrow(or later today).
